import org.apache.tools.ant.filters.ReplaceTokens
import java.nio.file.Files

plugins {
    id "com.github.jk1.dependency-license-report" version "0.3.5"
    id 'edu.sc.seis.launch4j' version '2.0.1'
}
apply plugin: 'java'
apply plugin: 'distribution'
apply from: "${project.rootDir}/gradle/eclipse.gradle"


sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '13'

def jarName = 'MediathekView.jar'
def mainClass = 'mediathek.Main'

compileJava {
    options.compilerArgs = ['-Xlint:all']
}
compileTestJava {
    options.compilerArgs = ['-Xlint:all']
}

repositories {
    maven {
        url "https://repo.mediathekview.de/repository/maven-public/"
    }
    flatDir {
        dirs 'libs'
    }
}

ext {
    swingxVersion = '1.6.6-SNAPSHOT'
    swingxGroup = ''
    propsFile = file('src/main/resources/version.properties').absoluteFile
    if(!propsFile.exists()) {
        Files.createFile(propsFile.toPath())
    }
}

def loadVersionProperties() {
    Properties props = new Properties()
    props.load(propsFile.newDataInputStream())
    return props
}

task updateVersion << {
    Properties props = loadVersionProperties()
    
    def oldVersion = props.getProperty('VERSION')
    if(!oldVersion.equals(project.version)) 
    {
	    logger.lifecycle "==msearch======================"
	    logger.lifecycle "Version: $project.version"
	    logger.lifecycle "==msearch======================"
	    props.setProperty('VERSION', project.version)	
	    props.store(propsFile.newWriter(), null)
    }
}

processResources.dependsOn updateVersion

/*
licenseReport {
    outputDir = "res/Copyright/"
    excludes = [':MSearch', 'MediathekView:MSearch']
    configurations = ['compile']
}

processResources.dependsOn generateLicenseReport
*/
tasks.withType(Zip) { task ->
    task.doLast {
        ant.checksum(algorithm: 'SHA-1', file: it.archivePath)
        ant.checksum(algorithm: 'MD5', file: it.archivePath)
    }
}

task copyProgrammIconsInRes(type: Copy) {
    logger.lifecycle 'Copying Programm icons.'
    from 'src/main/resources/mediathek/res/programm'
    into 'res/Icons/Programm/Version-' + version
    include '*.png'
    exclude 'about'
}

processResources.dependsOn copyProgrammIconsInRes

task copySenderIconsInRes(type: Copy) {
    logger.lifecycle 'Copying Sender icons.'
    from 'src/main/resources/mediathek/res/sender'
    into 'res/Icons/Sender'
    include '*.png'
    exclude '*.xcv'
}

processResources.dependsOn copySenderIconsInRes

dependencies {
    compile project(':MSearch')

    compile "$swingxGroup:swingx-action:$swingxVersion"
    compile "$swingxGroup:swingx-autocomplete:$swingxVersion"
    compile "$swingxGroup:swingx-beaninfo:$swingxVersion"
    compile "$swingxGroup:swingx-common:$swingxVersion"
    compile "$swingxGroup:swingx-core:$swingxVersion"
    compile "$swingxGroup:swingx-graphics:$swingxVersion"
    compile "$swingxGroup:swingx-painters:$swingxVersion"
    compile "$swingxGroup:swingx-plaf:$swingxVersion"

    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.fasterxml.jackson.core:jackson-core:2.7.0'
    compile 'com.jidesoft:jide-oss:3.6.16'
    compile 'org.tukaani:xz:1.5'
    compile 'com.jgoodies:jgoodies-forms:1.9.0'
    compile 'net.sf.jchart2d:jchart2d:3.3.2'

    compileOnly 'com.yuvimasory:orange-extensions:1.3.0'
}

[distZip, distTar]*.shouldRunAfter compileJava, updateVersion, jar

jar {
    manifest {
        attributes(
            'SplashScreen-Image': 'mediathek/res/splash.png',
            'Main-Class': mainClass,
            'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')
        )
    }
    archiveName = jarName
}

distributions {
    main {
        baseName = 'MediathekView'
        contents {
            into('lib') {
                from configurations.compile
            }
            from('res') {
                filesMatching('**/*.sh') {
                    filter(ReplaceTokens, tokens: [JARNAME: jarName])
                }
                filesMatching('**/*.txt') {
                    filter(ReplaceTokens, tokens: [JARNAME: jarName])
                }
                filesMatching('**/*.command') {
                    filter(ReplaceTokens, tokens: [JARNAME: jarName])
                }
            }
            from('build/libs') {
                include '*.jar'
            }
            from('build/launch4j') {
                include '*.exe'
                exclude 'lib'
                //exclude 'MediathekView.exe'
            }
        }
    }
}

task run(type: JavaExec, dependsOn: classes) {
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath
}

/**
* HOWTO debug:
*  1. run "gradle debug"
*  2. Call your IDE to connect to a remote java application on port 5005.
*/
task debug(type: JavaExec, dependsOn: classes) {
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath
    debug true
}
    
//Windows executable generation
launch4j {
    mainClassName = mainClass
    icon = "../../res/Info/MediathekView.ico"
    jar = jarName
    dontWrapJar = true
   	outfile="MediathekView_ohne_feste_Speicherzuweisung.exe"
}

task creatMitSpeicherExe(type: edu.sc.seis.launch4j.tasks.Launch4jLibraryTask) {
   outfile="MediathekView.exe"

   initialHeapSize=256
   maxHeapSize=2048
   maxHeapPercent=80
}  

task createIpv4Exe(type: edu.sc.seis.launch4j.tasks.Launch4jLibraryTask) {
    outfile="MediathekView_ipv4.exe"
    opt="-Djava.net.preferIPv4Stack=true"

    initialHeapSize=256
    maxHeapSize=2048
    maxHeapPercent=80
}

task createPortableExe(type: edu.sc.seis.launch4j.tasks.Launch4jLibraryTask) {
   	outfile="MediathekView_Portable.exe"
   	cmdLine="Einstellungen/.mediathek3"
	
    initialHeapSize=256
    maxHeapSize=2048
    maxHeapPercent=80
}

assemble.dependsOn createAllExecutables
