package mediathek.javaswing.filterpanel;

import com.jidesoft.swing.CheckBoxList;
import java.awt.Component;
import javafx.beans.value.ChangeListener;
import javafx.util.StringConverter;
import mediathek.tool.FilterDTO;
import mediathek.tool.SVGIconUtilities;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.event.ActionListener;
import javax.swing.*;


public class CommonViewSettingsPaneSwing extends JDialog {

    private boolean deleteCurrentFilterButtonDisabled;

    public CommonViewSettingsPaneSwing(Frame parent, boolean modal) {

        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
 
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filterSelect = new JComboBox<>();
        btnRenameFilter = new JButton();
        btnAddNewFilter = new JButton();
        btnDeleteCurrentFilter = new JButton();
        btnDeleteFilterSettings = new JButton();
        separatorBtmRow = new JSeparator();
        cbShowNewOnly = new JCheckBox();
        cbShowBookMarkedOnly = new JCheckBox();
        cbShowOnlyHd = new JCheckBox();
        cbShowSubtitlesOnly = new JCheckBox();
        cbShowOnlyLivestreams = new JCheckBox();
        separatorCB = new JSeparator();
        cbShowUnseenOnly = new JCheckBox();
        cbDontShowAbos = new JCheckBox();
        cbDontShowGebaerdensprache = new JCheckBox();
        cbDontShowTrailers = new JCheckBox();
        cbDontShowAudioVersions = new JCheckBox();
        separatorSender = new JSeparator();
        senderLabel = new JLabel();
        scrollPaneSender = new JScrollPane();
        senderCheckList = new CheckBoxList();
        separatorThema = new JSeparator();
        themaComboBox = new ThemaComboBoxSwing();
        separatorSlider = new JSeparator();
        zeitraumSpinner = new ZeitraumSpinnerSwing();
        themaLabel = new JLabel();
        filmLengthSliderNode = new FilmLengthSliderNodeSwing();
        separatorSpinner = new JSeparator();
        zeitraumLabel = new JLabel();
        tageLabel = new JLabel();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Filter");

        btnRenameFilter.setIcon(SVGIconUtilities.createSVGIcon("icons/fontawesome/pen-to-square.svg"));
        btnRenameFilter.setToolTipText("Filter umbenennen");
        btnRenameFilter.setPreferredSize(new Dimension(72, 22));

        btnAddNewFilter.setIcon(SVGIconUtilities.createSVGIcon("icons/fontawesome/plus.svg"));
        btnAddNewFilter.setToolTipText("Neuen Filter anlegen");
        btnAddNewFilter.setPreferredSize(new Dimension(72, 22));

        btnDeleteCurrentFilter.setIcon(SVGIconUtilities.createSVGIcon("icons/fontawesome/trash-can.svg"));
        btnDeleteCurrentFilter.setToolTipText("Aktuellen Filter löschen");
        btnDeleteCurrentFilter.setPreferredSize(new Dimension(72, 22));

        btnDeleteFilterSettings.setIcon(SVGIconUtilities.createSVGIcon("icons/fontawesome/recycle.svg"));
        btnDeleteFilterSettings.setToolTipText("Aktuellen Filter zurücksetzen");
        btnDeleteFilterSettings.setPreferredSize(new Dimension(72, 22));

        cbShowNewOnly.setText("Nur neue Filme anzeigen");

        cbShowBookMarkedOnly.setText("Nur gemerkte Filme anzeigen");

        cbShowOnlyHd.setText("Nur High Quality(HQ) Filme anzeigen");

        cbShowSubtitlesOnly.setText("Nur Filme mit Untertitel anzeigen");

        cbShowOnlyLivestreams.setText("Nur Live Streams anzeigen");

        cbShowUnseenOnly.setText("Gesehene Filme nicht anzeigen");

        cbDontShowAbos.setText("Abos nicht anzeigen");

        cbDontShowGebaerdensprache.setText("Gebärdensprache nicht anzeigen");

        cbDontShowTrailers.setText("Trailer/Teaser/Vorschau nicht anzeigen");

        cbDontShowAudioVersions.setText("Hörfassungen ausblenden");

        senderLabel.setText("Sender:");

        scrollPaneSender.setViewportView(senderCheckList);

        themaLabel.setText("Thema:");

        zeitraumLabel.setText("Zeitraum:");

        tageLabel.setText("Tage");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPaneSender, GroupLayout.Alignment.TRAILING)
                    .addComponent(separatorSender)
                    .addComponent(separatorBtmRow)
                    .addComponent(separatorCB)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filterSelect, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRenameFilter, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddNewFilter, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteCurrentFilter, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteFilterSettings, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE))
                    .addComponent(senderLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(separatorThema, GroupLayout.Alignment.TRAILING)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(themaLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(themaComboBox, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(separatorSlider, GroupLayout.Alignment.TRAILING)
                    .addComponent(filmLengthSliderNode, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(separatorSpinner, GroupLayout.Alignment.TRAILING)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(zeitraumLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(zeitraumSpinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tageLabel))
                            .addComponent(cbDontShowGebaerdensprache, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                            .addComponent(cbShowSubtitlesOnly, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                            .addComponent(cbShowNewOnly, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                            .addComponent(cbShowBookMarkedOnly, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                            .addComponent(cbShowOnlyHd, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                            .addComponent(cbShowOnlyLivestreams, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                            .addComponent(cbShowUnseenOnly, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                            .addComponent(cbDontShowAbos, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                            .addComponent(cbDontShowTrailers, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                            .addComponent(cbDontShowAudioVersions, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE))))
                .addContainerGap())
        );

        layout.linkSize(SwingConstants.HORIZONTAL, new Component[] {btnAddNewFilter, btnDeleteCurrentFilter, btnDeleteFilterSettings, btnRenameFilter});

        layout.linkSize(SwingConstants.HORIZONTAL, new Component[] {cbDontShowAbos, cbDontShowAudioVersions, cbDontShowGebaerdensprache, cbDontShowTrailers, cbShowBookMarkedOnly, cbShowNewOnly, cbShowOnlyHd, cbShowOnlyLivestreams, cbShowSubtitlesOnly, cbShowUnseenOnly});

        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(btnDeleteFilterSettings, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddNewFilter, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRenameFilter, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterSelect, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteCurrentFilter, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separatorBtmRow, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbShowNewOnly)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbShowBookMarkedOnly)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbShowOnlyHd)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbShowSubtitlesOnly)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbShowOnlyLivestreams)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separatorCB, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbShowUnseenOnly)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbDontShowAbos)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbDontShowGebaerdensprache)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbDontShowTrailers)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbDontShowAudioVersions)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separatorSender, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(senderLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneSender, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separatorThema, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(themaComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(themaLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separatorSlider, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filmLengthSliderNode, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separatorSpinner, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(zeitraumLabel)
                    .addComponent(zeitraumSpinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(tageLabel))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        layout.linkSize(SwingConstants.VERTICAL, new Component[] {btnAddNewFilter, btnDeleteCurrentFilter, btnDeleteFilterSettings, btnRenameFilter});

        layout.linkSize(SwingConstants.VERTICAL, new Component[] {cbDontShowAbos, cbDontShowAudioVersions, cbDontShowGebaerdensprache, cbDontShowTrailers, cbShowBookMarkedOnly, cbShowNewOnly, cbShowOnlyHd, cbShowOnlyLivestreams, cbShowSubtitlesOnly, cbShowUnseenOnly});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void disableDeleteCurrentFilterButton(boolean disable) {
        deleteCurrentFilterButtonDisabled = disable;
        btnDeleteCurrentFilter.setEnabled(!disable);
    }

    public void selectFilter(FilterDTO filter) {
        ComboBoxModel <FilterDTO> selectionModel = filterSelect.getModel();
        if (!filter.equals(selectionModel.getSelectedItem())) {
            selectionModel.setSelectedItem(filter);
        }
    }

    public void setAddNewFilterButtonEventHandler(ActionListener listener) {
        btnAddNewFilter.addActionListener(listener);
    }

    public void setAvailableFilters(DefaultComboBoxModel<FilterDTO> filters) {
        filterSelect.setModel(filters);
    }

    public void setFilterSelectionChangeListener(ActionListener listener) {
        filterSelect.addActionListener(listener);
    }

    public void setFilterSelectionStringConverter(java.util.function.Function<FilterDTO, String> toStringConverter) {
        // Set custom renderer for display
        filterSelect.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof FilterDTO) {
                    setText(toStringConverter.apply((FilterDTO) value));
                }
                return this;
            }
        });

        // Set custom editor for text input
        filterSelect.setEditor(new ComboBoxEditor() {
            private JTextField editor = new JTextField();

            @Override
            public Component getEditorComponent() {
                return editor;
            }

            @Override
            public void setItem(Object item) {
                if (item instanceof FilterDTO) {
                    editor.setText(toStringConverter.apply((FilterDTO) item));
                }
            }

            @Override
            public Object getItem() {
                String text = editor.getText();
                return new FilterDTO(text); // Assuming a constructor exists
            }

            @Override
            public void selectAll() {
                editor.selectAll();
            }

            @Override
            public void addActionListener(java.awt.event.ActionListener l) {
                editor.addActionListener(l);
            }

            @Override
            public void removeActionListener(java.awt.event.ActionListener l) {
                editor.removeActionListener(l);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public JButton btnAddNewFilter;
    public JButton btnDeleteCurrentFilter;
    public JButton btnDeleteFilterSettings;
    public JButton btnRenameFilter;
    public JCheckBox cbDontShowAbos;
    public JCheckBox cbDontShowAudioVersions;
    public JCheckBox cbDontShowGebaerdensprache;
    public JCheckBox cbDontShowTrailers;
    public JCheckBox cbShowBookMarkedOnly;
    public JCheckBox cbShowNewOnly;
    public JCheckBox cbShowOnlyHd;
    public JCheckBox cbShowOnlyLivestreams;
    public JCheckBox cbShowSubtitlesOnly;
    public JCheckBox cbShowUnseenOnly;
    public FilmLengthSliderNodeSwing filmLengthSliderNode;
    public JComboBox<FilterDTO> filterSelect;
    private JScrollPane scrollPaneSender;
    public CheckBoxList senderCheckList;
    private JLabel senderLabel;
    private JSeparator separatorBtmRow;
    private JSeparator separatorCB;
    private JSeparator separatorSender;
    private JSeparator separatorSlider;
    private JSeparator separatorSpinner;
    private JSeparator separatorThema;
    private JLabel tageLabel;
    public ThemaComboBoxSwing themaComboBox;
    private JLabel themaLabel;
    private JLabel zeitraumLabel;
    public ZeitraumSpinnerSwing zeitraumSpinner;
    // End of variables declaration//GEN-END:variables
}
